// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/broker.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrokerService_CreateBroker_FullMethodName      = "/broker.BrokerService/CreateBroker"
	BrokerService_GetBroker_FullMethodName         = "/broker.BrokerService/GetBroker"
	BrokerService_UpdateBroker_FullMethodName      = "/broker.BrokerService/UpdateBroker"
	BrokerService_DeleteBroker_FullMethodName      = "/broker.BrokerService/DeleteBroker"
	BrokerService_ListBrokers_FullMethodName       = "/broker.BrokerService/ListBrokers"
	BrokerService_CreateBrokerUser_FullMethodName  = "/broker.BrokerService/CreateBrokerUser"
	BrokerService_GetBrokerUser_FullMethodName     = "/broker.BrokerService/GetBrokerUser"
	BrokerService_DeleteBrokerUser_FullMethodName  = "/broker.BrokerService/DeleteBrokerUser"
	BrokerService_ListUserBrokers_FullMethodName   = "/broker.BrokerService/ListUserBrokers"
	BrokerService_CreateBrokerImage_FullMethodName = "/broker.BrokerService/CreateBrokerImage"
	BrokerService_GetBrokerImage_FullMethodName    = "/broker.BrokerService/GetBrokerImage"
	BrokerService_UpdateBrokerImage_FullMethodName = "/broker.BrokerService/UpdateBrokerImage"
	BrokerService_DeleteBrokerImage_FullMethodName = "/broker.BrokerService/DeleteBrokerImage"
)

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerServiceClient interface {
	// Broker management
	CreateBroker(ctx context.Context, in *CreateBrokerRequest, opts ...grpc.CallOption) (*CreateBrokerResponse, error)
	GetBroker(ctx context.Context, in *GetBrokerRequest, opts ...grpc.CallOption) (*GetBrokerResponse, error)
	UpdateBroker(ctx context.Context, in *UpdateBrokerRequest, opts ...grpc.CallOption) (*UpdateBrokerResponse, error)
	DeleteBroker(ctx context.Context, in *DeleteBrokerRequest, opts ...grpc.CallOption) (*DeleteBrokerResponse, error)
	ListBrokers(ctx context.Context, in *ListBrokersRequest, opts ...grpc.CallOption) (*ListBrokersResponse, error)
	// Broker user management
	CreateBrokerUser(ctx context.Context, in *CreateBrokerUserRequest, opts ...grpc.CallOption) (*CreateBrokerUserResponse, error)
	GetBrokerUser(ctx context.Context, in *GetBrokerUserRequest, opts ...grpc.CallOption) (*GetBrokerUserResponse, error)
	DeleteBrokerUser(ctx context.Context, in *DeleteBrokerUserRequest, opts ...grpc.CallOption) (*DeleteBrokerUserResponse, error)
	ListUserBrokers(ctx context.Context, in *ListUserBrokersRequest, opts ...grpc.CallOption) (*ListUserBrokersResponse, error)
	// Image management
	CreateBrokerImage(ctx context.Context, in *CreateBrokerImageRequest, opts ...grpc.CallOption) (*CreateBrokerImageResponse, error)
	GetBrokerImage(ctx context.Context, in *GetBrokerImageRequest, opts ...grpc.CallOption) (*GetBrokerImageResponse, error)
	UpdateBrokerImage(ctx context.Context, in *UpdateBrokerImageRequest, opts ...grpc.CallOption) (*UpdateBrokerImageResponse, error)
	DeleteBrokerImage(ctx context.Context, in *DeleteBrokerImageRequest, opts ...grpc.CallOption) (*DeleteBrokerImageResponse, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) CreateBroker(ctx context.Context, in *CreateBrokerRequest, opts ...grpc.CallOption) (*CreateBrokerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBrokerResponse)
	err := c.cc.Invoke(ctx, BrokerService_CreateBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) GetBroker(ctx context.Context, in *GetBrokerRequest, opts ...grpc.CallOption) (*GetBrokerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrokerResponse)
	err := c.cc.Invoke(ctx, BrokerService_GetBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) UpdateBroker(ctx context.Context, in *UpdateBrokerRequest, opts ...grpc.CallOption) (*UpdateBrokerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBrokerResponse)
	err := c.cc.Invoke(ctx, BrokerService_UpdateBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) DeleteBroker(ctx context.Context, in *DeleteBrokerRequest, opts ...grpc.CallOption) (*DeleteBrokerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBrokerResponse)
	err := c.cc.Invoke(ctx, BrokerService_DeleteBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ListBrokers(ctx context.Context, in *ListBrokersRequest, opts ...grpc.CallOption) (*ListBrokersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBrokersResponse)
	err := c.cc.Invoke(ctx, BrokerService_ListBrokers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) CreateBrokerUser(ctx context.Context, in *CreateBrokerUserRequest, opts ...grpc.CallOption) (*CreateBrokerUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBrokerUserResponse)
	err := c.cc.Invoke(ctx, BrokerService_CreateBrokerUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) GetBrokerUser(ctx context.Context, in *GetBrokerUserRequest, opts ...grpc.CallOption) (*GetBrokerUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrokerUserResponse)
	err := c.cc.Invoke(ctx, BrokerService_GetBrokerUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) DeleteBrokerUser(ctx context.Context, in *DeleteBrokerUserRequest, opts ...grpc.CallOption) (*DeleteBrokerUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBrokerUserResponse)
	err := c.cc.Invoke(ctx, BrokerService_DeleteBrokerUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ListUserBrokers(ctx context.Context, in *ListUserBrokersRequest, opts ...grpc.CallOption) (*ListUserBrokersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserBrokersResponse)
	err := c.cc.Invoke(ctx, BrokerService_ListUserBrokers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) CreateBrokerImage(ctx context.Context, in *CreateBrokerImageRequest, opts ...grpc.CallOption) (*CreateBrokerImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBrokerImageResponse)
	err := c.cc.Invoke(ctx, BrokerService_CreateBrokerImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) GetBrokerImage(ctx context.Context, in *GetBrokerImageRequest, opts ...grpc.CallOption) (*GetBrokerImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrokerImageResponse)
	err := c.cc.Invoke(ctx, BrokerService_GetBrokerImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) UpdateBrokerImage(ctx context.Context, in *UpdateBrokerImageRequest, opts ...grpc.CallOption) (*UpdateBrokerImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBrokerImageResponse)
	err := c.cc.Invoke(ctx, BrokerService_UpdateBrokerImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) DeleteBrokerImage(ctx context.Context, in *DeleteBrokerImageRequest, opts ...grpc.CallOption) (*DeleteBrokerImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBrokerImageResponse)
	err := c.cc.Invoke(ctx, BrokerService_DeleteBrokerImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility.
type BrokerServiceServer interface {
	// Broker management
	CreateBroker(context.Context, *CreateBrokerRequest) (*CreateBrokerResponse, error)
	GetBroker(context.Context, *GetBrokerRequest) (*GetBrokerResponse, error)
	UpdateBroker(context.Context, *UpdateBrokerRequest) (*UpdateBrokerResponse, error)
	DeleteBroker(context.Context, *DeleteBrokerRequest) (*DeleteBrokerResponse, error)
	ListBrokers(context.Context, *ListBrokersRequest) (*ListBrokersResponse, error)
	// Broker user management
	CreateBrokerUser(context.Context, *CreateBrokerUserRequest) (*CreateBrokerUserResponse, error)
	GetBrokerUser(context.Context, *GetBrokerUserRequest) (*GetBrokerUserResponse, error)
	DeleteBrokerUser(context.Context, *DeleteBrokerUserRequest) (*DeleteBrokerUserResponse, error)
	ListUserBrokers(context.Context, *ListUserBrokersRequest) (*ListUserBrokersResponse, error)
	// Image management
	CreateBrokerImage(context.Context, *CreateBrokerImageRequest) (*CreateBrokerImageResponse, error)
	GetBrokerImage(context.Context, *GetBrokerImageRequest) (*GetBrokerImageResponse, error)
	UpdateBrokerImage(context.Context, *UpdateBrokerImageRequest) (*UpdateBrokerImageResponse, error)
	DeleteBrokerImage(context.Context, *DeleteBrokerImageRequest) (*DeleteBrokerImageResponse, error)
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrokerServiceServer struct{}

func (UnimplementedBrokerServiceServer) CreateBroker(context.Context, *CreateBrokerRequest) (*CreateBrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBroker not implemented")
}
func (UnimplementedBrokerServiceServer) GetBroker(context.Context, *GetBrokerRequest) (*GetBrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroker not implemented")
}
func (UnimplementedBrokerServiceServer) UpdateBroker(context.Context, *UpdateBrokerRequest) (*UpdateBrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBroker not implemented")
}
func (UnimplementedBrokerServiceServer) DeleteBroker(context.Context, *DeleteBrokerRequest) (*DeleteBrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBroker not implemented")
}
func (UnimplementedBrokerServiceServer) ListBrokers(context.Context, *ListBrokersRequest) (*ListBrokersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrokers not implemented")
}
func (UnimplementedBrokerServiceServer) CreateBrokerUser(context.Context, *CreateBrokerUserRequest) (*CreateBrokerUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrokerUser not implemented")
}
func (UnimplementedBrokerServiceServer) GetBrokerUser(context.Context, *GetBrokerUserRequest) (*GetBrokerUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerUser not implemented")
}
func (UnimplementedBrokerServiceServer) DeleteBrokerUser(context.Context, *DeleteBrokerUserRequest) (*DeleteBrokerUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrokerUser not implemented")
}
func (UnimplementedBrokerServiceServer) ListUserBrokers(context.Context, *ListUserBrokersRequest) (*ListUserBrokersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBrokers not implemented")
}
func (UnimplementedBrokerServiceServer) CreateBrokerImage(context.Context, *CreateBrokerImageRequest) (*CreateBrokerImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrokerImage not implemented")
}
func (UnimplementedBrokerServiceServer) GetBrokerImage(context.Context, *GetBrokerImageRequest) (*GetBrokerImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerImage not implemented")
}
func (UnimplementedBrokerServiceServer) UpdateBrokerImage(context.Context, *UpdateBrokerImageRequest) (*UpdateBrokerImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrokerImage not implemented")
}
func (UnimplementedBrokerServiceServer) DeleteBrokerImage(context.Context, *DeleteBrokerImageRequest) (*DeleteBrokerImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrokerImage not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}
func (UnimplementedBrokerServiceServer) testEmbeddedByValue()                       {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrokerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_CreateBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).CreateBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_CreateBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).CreateBroker(ctx, req.(*CreateBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_GetBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).GetBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_GetBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).GetBroker(ctx, req.(*GetBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_UpdateBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).UpdateBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_UpdateBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).UpdateBroker(ctx, req.(*UpdateBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_DeleteBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).DeleteBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_DeleteBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).DeleteBroker(ctx, req.(*DeleteBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ListBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBrokersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).ListBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_ListBrokers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).ListBrokers(ctx, req.(*ListBrokersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_CreateBrokerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrokerUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).CreateBrokerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_CreateBrokerUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).CreateBrokerUser(ctx, req.(*CreateBrokerUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_GetBrokerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).GetBrokerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_GetBrokerUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).GetBrokerUser(ctx, req.(*GetBrokerUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_DeleteBrokerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrokerUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).DeleteBrokerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_DeleteBrokerUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).DeleteBrokerUser(ctx, req.(*DeleteBrokerUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ListUserBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBrokersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).ListUserBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_ListUserBrokers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).ListUserBrokers(ctx, req.(*ListUserBrokersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_CreateBrokerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrokerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).CreateBrokerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_CreateBrokerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).CreateBrokerImage(ctx, req.(*CreateBrokerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_GetBrokerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).GetBrokerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_GetBrokerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).GetBrokerImage(ctx, req.(*GetBrokerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_UpdateBrokerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrokerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).UpdateBrokerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_UpdateBrokerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).UpdateBrokerImage(ctx, req.(*UpdateBrokerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_DeleteBrokerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrokerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).DeleteBrokerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_DeleteBrokerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).DeleteBrokerImage(ctx, req.(*DeleteBrokerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBroker",
			Handler:    _BrokerService_CreateBroker_Handler,
		},
		{
			MethodName: "GetBroker",
			Handler:    _BrokerService_GetBroker_Handler,
		},
		{
			MethodName: "UpdateBroker",
			Handler:    _BrokerService_UpdateBroker_Handler,
		},
		{
			MethodName: "DeleteBroker",
			Handler:    _BrokerService_DeleteBroker_Handler,
		},
		{
			MethodName: "ListBrokers",
			Handler:    _BrokerService_ListBrokers_Handler,
		},
		{
			MethodName: "CreateBrokerUser",
			Handler:    _BrokerService_CreateBrokerUser_Handler,
		},
		{
			MethodName: "GetBrokerUser",
			Handler:    _BrokerService_GetBrokerUser_Handler,
		},
		{
			MethodName: "DeleteBrokerUser",
			Handler:    _BrokerService_DeleteBrokerUser_Handler,
		},
		{
			MethodName: "ListUserBrokers",
			Handler:    _BrokerService_ListUserBrokers_Handler,
		},
		{
			MethodName: "CreateBrokerImage",
			Handler:    _BrokerService_CreateBrokerImage_Handler,
		},
		{
			MethodName: "GetBrokerImage",
			Handler:    _BrokerService_GetBrokerImage_Handler,
		},
		{
			MethodName: "UpdateBrokerImage",
			Handler:    _BrokerService_UpdateBrokerImage_Handler,
		},
		{
			MethodName: "DeleteBrokerImage",
			Handler:    _BrokerService_DeleteBrokerImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/broker.proto",
}
