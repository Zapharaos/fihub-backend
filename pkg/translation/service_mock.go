// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=translation -mock_names=Service=MockService Service
//

// Package translation is a generated GoMock package.
package translation

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	language "golang.org/x/text/language"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Localizer mocks base method.
func (m *MockService) Localizer(language language.Tag) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Localizer", language)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Localizer indicates an expected call of Localizer.
func (mr *MockServiceMockRecorder) Localizer(language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Localizer", reflect.TypeOf((*MockService)(nil).Localizer), language)
}

// Message mocks base method.
func (m *MockService) Message(localizer any, message *Message) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message", localizer, message)
	ret0, _ := ret[0].(string)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockServiceMockRecorder) Message(localizer, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockService)(nil).Message), localizer, message)
}
