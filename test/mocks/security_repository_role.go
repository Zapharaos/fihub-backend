// Code generated by MockGen. DO NOT EDIT.
// Source: role_repository.go
//
// Generated by this command:
//
//	mockgen -source=role_repository.go -destination=../../../../test/mocks/security_repository_role.go --package=mocks -mock_names=RoleRepository=SecurityRoleRepository RoleRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Zapharaos/fihub-backend/internal/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// SecurityRoleRepository is a mock of RoleRepository interface.
type SecurityRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *SecurityRoleRepositoryMockRecorder
	isgomock struct{}
}

// SecurityRoleRepositoryMockRecorder is the mock recorder for SecurityRoleRepository.
type SecurityRoleRepositoryMockRecorder struct {
	mock *SecurityRoleRepository
}

// NewSecurityRoleRepository creates a new mock instance.
func NewSecurityRoleRepository(ctrl *gomock.Controller) *SecurityRoleRepository {
	mock := &SecurityRoleRepository{ctrl: ctrl}
	mock.recorder = &SecurityRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SecurityRoleRepository) EXPECT() *SecurityRoleRepositoryMockRecorder {
	return m.recorder
}

// AddToUsers mocks base method.
func (m *SecurityRoleRepository) AddToUsers(userUUIDs []uuid.UUID, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToUsers", userUUIDs, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToUsers indicates an expected call of AddToUsers.
func (mr *SecurityRoleRepositoryMockRecorder) AddToUsers(userUUIDs, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToUsers", reflect.TypeOf((*SecurityRoleRepository)(nil).AddToUsers), userUUIDs, id)
}

// Create mocks base method.
func (m *SecurityRoleRepository) Create(role models.Role, permissions models.RolePermissionsInput) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", role, permissions)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *SecurityRoleRepositoryMockRecorder) Create(role, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*SecurityRoleRepository)(nil).Create), role, permissions)
}

// Delete mocks base method.
func (m *SecurityRoleRepository) Delete(uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *SecurityRoleRepositoryMockRecorder) Delete(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*SecurityRoleRepository)(nil).Delete), uuid)
}

// Get mocks base method.
func (m *SecurityRoleRepository) Get(uuid uuid.UUID) (models.Role, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uuid)
	ret0, _ := ret[0].(models.Role)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *SecurityRoleRepositoryMockRecorder) Get(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*SecurityRoleRepository)(nil).Get), uuid)
}

// GetByName mocks base method.
func (m *SecurityRoleRepository) GetByName(name string) (models.Role, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(models.Role)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *SecurityRoleRepositoryMockRecorder) GetByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*SecurityRoleRepository)(nil).GetByName), name)
}

// GetWithPermissions mocks base method.
func (m *SecurityRoleRepository) GetWithPermissions(uuid uuid.UUID) (models.RoleWithPermissions, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithPermissions", uuid)
	ret0, _ := ret[0].(models.RoleWithPermissions)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithPermissions indicates an expected call of GetWithPermissions.
func (mr *SecurityRoleRepositoryMockRecorder) GetWithPermissions(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPermissions", reflect.TypeOf((*SecurityRoleRepository)(nil).GetWithPermissions), uuid)
}

// List mocks base method.
func (m *SecurityRoleRepository) List() (models.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(models.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *SecurityRoleRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*SecurityRoleRepository)(nil).List))
}

// ListByUserId mocks base method.
func (m *SecurityRoleRepository) ListByUserId(userUUID uuid.UUID) (models.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserId", userUUID)
	ret0, _ := ret[0].(models.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserId indicates an expected call of ListByUserId.
func (mr *SecurityRoleRepositoryMockRecorder) ListByUserId(userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserId", reflect.TypeOf((*SecurityRoleRepository)(nil).ListByUserId), userUUID)
}

// ListPermissionsByRoleId mocks base method.
func (m *SecurityRoleRepository) ListPermissionsByRoleId(roleUUID uuid.UUID) (models.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsByRoleId", roleUUID)
	ret0, _ := ret[0].(models.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsByRoleId indicates an expected call of ListPermissionsByRoleId.
func (mr *SecurityRoleRepositoryMockRecorder) ListPermissionsByRoleId(roleUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsByRoleId", reflect.TypeOf((*SecurityRoleRepository)(nil).ListPermissionsByRoleId), roleUUID)
}

// ListPermissionsByUserId mocks base method.
func (m *SecurityRoleRepository) ListPermissionsByUserId(userUUID uuid.UUID) (models.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsByUserId", userUUID)
	ret0, _ := ret[0].(models.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsByUserId indicates an expected call of ListPermissionsByUserId.
func (mr *SecurityRoleRepositoryMockRecorder) ListPermissionsByUserId(userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsByUserId", reflect.TypeOf((*SecurityRoleRepository)(nil).ListPermissionsByUserId), userUUID)
}

// ListUsers mocks base method.
func (m *SecurityRoleRepository) ListUsers() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *SecurityRoleRepositoryMockRecorder) ListUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*SecurityRoleRepository)(nil).ListUsers))
}

// ListUsersByRoleId mocks base method.
func (m *SecurityRoleRepository) ListUsersByRoleId(roleUUID uuid.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByRoleId", roleUUID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByRoleId indicates an expected call of ListUsersByRoleId.
func (mr *SecurityRoleRepositoryMockRecorder) ListUsersByRoleId(roleUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByRoleId", reflect.TypeOf((*SecurityRoleRepository)(nil).ListUsersByRoleId), roleUUID)
}

// ListWithPermissions mocks base method.
func (m *SecurityRoleRepository) ListWithPermissions() (models.RolesWithPermissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithPermissions")
	ret0, _ := ret[0].(models.RolesWithPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithPermissions indicates an expected call of ListWithPermissions.
func (mr *SecurityRoleRepositoryMockRecorder) ListWithPermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithPermissions", reflect.TypeOf((*SecurityRoleRepository)(nil).ListWithPermissions))
}

// ListWithPermissionsByUserId mocks base method.
func (m *SecurityRoleRepository) ListWithPermissionsByUserId(userUUID uuid.UUID) (models.RolesWithPermissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithPermissionsByUserId", userUUID)
	ret0, _ := ret[0].(models.RolesWithPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithPermissionsByUserId indicates an expected call of ListWithPermissionsByUserId.
func (mr *SecurityRoleRepositoryMockRecorder) ListWithPermissionsByUserId(userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithPermissionsByUserId", reflect.TypeOf((*SecurityRoleRepository)(nil).ListWithPermissionsByUserId), userUUID)
}

// RemoveFromUsers mocks base method.
func (m *SecurityRoleRepository) RemoveFromUsers(userUUIDs []uuid.UUID, roleUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromUsers", userUUIDs, roleUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromUsers indicates an expected call of RemoveFromUsers.
func (mr *SecurityRoleRepositoryMockRecorder) RemoveFromUsers(userUUIDs, roleUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromUsers", reflect.TypeOf((*SecurityRoleRepository)(nil).RemoveFromUsers), userUUIDs, roleUUID)
}

// SetForUser mocks base method.
func (m *SecurityRoleRepository) SetForUser(userUUID uuid.UUID, roleUUIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetForUser", userUUID, roleUUIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetForUser indicates an expected call of SetForUser.
func (mr *SecurityRoleRepositoryMockRecorder) SetForUser(userUUID, roleUUIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetForUser", reflect.TypeOf((*SecurityRoleRepository)(nil).SetForUser), userUUID, roleUUIDs)
}

// SetPermissionsByRoleId mocks base method.
func (m *SecurityRoleRepository) SetPermissionsByRoleId(roleUUID uuid.UUID, permissionUUIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPermissionsByRoleId", roleUUID, permissionUUIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPermissionsByRoleId indicates an expected call of SetPermissionsByRoleId.
func (mr *SecurityRoleRepositoryMockRecorder) SetPermissionsByRoleId(roleUUID, permissionUUIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermissionsByRoleId", reflect.TypeOf((*SecurityRoleRepository)(nil).SetPermissionsByRoleId), roleUUID, permissionUUIDs)
}

// Update mocks base method.
func (m *SecurityRoleRepository) Update(role models.Role, permissions models.RolePermissionsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", role, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *SecurityRoleRepositoryMockRecorder) Update(role, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*SecurityRoleRepository)(nil).Update), role, permissions)
}
