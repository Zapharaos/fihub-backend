// Code generated by MockGen. DO NOT EDIT.
// Source: ../gen/go/securitypb/security_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=../gen/go/securitypb/security_grpc.pb.go -destination=../test/mocks/security_client.go -package=mocks SecurityServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	securitypb "github.com/Zapharaos/fihub-backend/gen/go/securitypb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSecurityServiceClient is a mock of SecurityServiceClient interface.
type MockSecurityServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityServiceClientMockRecorder
	isgomock struct{}
}

// MockSecurityServiceClientMockRecorder is the mock recorder for MockSecurityServiceClient.
type MockSecurityServiceClientMockRecorder struct {
	mock *MockSecurityServiceClient
}

// NewMockSecurityServiceClient creates a new mock instance.
func NewMockSecurityServiceClient(ctrl *gomock.Controller) *MockSecurityServiceClient {
	mock := &MockSecurityServiceClient{ctrl: ctrl}
	mock.recorder = &MockSecurityServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityServiceClient) EXPECT() *MockSecurityServiceClientMockRecorder {
	return m.recorder
}

// AddUsersToRole mocks base method.
func (m *MockSecurityServiceClient) AddUsersToRole(ctx context.Context, in *securitypb.AddUsersToRoleRequest, opts ...grpc.CallOption) (*securitypb.AddUsersToRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUsersToRole", varargs...)
	ret0, _ := ret[0].(*securitypb.AddUsersToRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUsersToRole indicates an expected call of AddUsersToRole.
func (mr *MockSecurityServiceClientMockRecorder) AddUsersToRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersToRole", reflect.TypeOf((*MockSecurityServiceClient)(nil).AddUsersToRole), varargs...)
}

// CreatePermission mocks base method.
func (m *MockSecurityServiceClient) CreatePermission(ctx context.Context, in *securitypb.CreatePermissionRequest, opts ...grpc.CallOption) (*securitypb.CreatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePermission", varargs...)
	ret0, _ := ret[0].(*securitypb.CreatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockSecurityServiceClientMockRecorder) CreatePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockSecurityServiceClient)(nil).CreatePermission), varargs...)
}

// CreateRole mocks base method.
func (m *MockSecurityServiceClient) CreateRole(ctx context.Context, in *securitypb.CreateRoleRequest, opts ...grpc.CallOption) (*securitypb.CreateRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(*securitypb.CreateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockSecurityServiceClientMockRecorder) CreateRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockSecurityServiceClient)(nil).CreateRole), varargs...)
}

// DeletePermission mocks base method.
func (m *MockSecurityServiceClient) DeletePermission(ctx context.Context, in *securitypb.DeletePermissionRequest, opts ...grpc.CallOption) (*securitypb.DeletePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermission", varargs...)
	ret0, _ := ret[0].(*securitypb.DeletePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockSecurityServiceClientMockRecorder) DeletePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockSecurityServiceClient)(nil).DeletePermission), varargs...)
}

// DeleteRole mocks base method.
func (m *MockSecurityServiceClient) DeleteRole(ctx context.Context, in *securitypb.DeleteRoleRequest, opts ...grpc.CallOption) (*securitypb.DeleteRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(*securitypb.DeleteRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockSecurityServiceClientMockRecorder) DeleteRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockSecurityServiceClient)(nil).DeleteRole), varargs...)
}

// GetPermission mocks base method.
func (m *MockSecurityServiceClient) GetPermission(ctx context.Context, in *securitypb.GetPermissionRequest, opts ...grpc.CallOption) (*securitypb.GetPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermission", varargs...)
	ret0, _ := ret[0].(*securitypb.GetPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockSecurityServiceClientMockRecorder) GetPermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockSecurityServiceClient)(nil).GetPermission), varargs...)
}

// GetRole mocks base method.
func (m *MockSecurityServiceClient) GetRole(ctx context.Context, in *securitypb.GetRoleRequest, opts ...grpc.CallOption) (*securitypb.GetRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRole", varargs...)
	ret0, _ := ret[0].(*securitypb.GetRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockSecurityServiceClientMockRecorder) GetRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockSecurityServiceClient)(nil).GetRole), varargs...)
}

// ListPermissions mocks base method.
func (m *MockSecurityServiceClient) ListPermissions(ctx context.Context, in *securitypb.ListPermissionsRequest, opts ...grpc.CallOption) (*securitypb.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissions", varargs...)
	ret0, _ := ret[0].(*securitypb.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockSecurityServiceClientMockRecorder) ListPermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockSecurityServiceClient)(nil).ListPermissions), varargs...)
}

// ListRolePermissions mocks base method.
func (m *MockSecurityServiceClient) ListRolePermissions(ctx context.Context, in *securitypb.ListRolePermissionsRequest, opts ...grpc.CallOption) (*securitypb.ListRolePermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRolePermissions", varargs...)
	ret0, _ := ret[0].(*securitypb.ListRolePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolePermissions indicates an expected call of ListRolePermissions.
func (mr *MockSecurityServiceClientMockRecorder) ListRolePermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolePermissions", reflect.TypeOf((*MockSecurityServiceClient)(nil).ListRolePermissions), varargs...)
}

// ListRoles mocks base method.
func (m *MockSecurityServiceClient) ListRoles(ctx context.Context, in *securitypb.ListRolesRequest, opts ...grpc.CallOption) (*securitypb.ListRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoles", varargs...)
	ret0, _ := ret[0].(*securitypb.ListRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockSecurityServiceClientMockRecorder) ListRoles(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockSecurityServiceClient)(nil).ListRoles), varargs...)
}

// ListRolesForUser mocks base method.
func (m *MockSecurityServiceClient) ListRolesForUser(ctx context.Context, in *securitypb.ListRolesForUserRequest, opts ...grpc.CallOption) (*securitypb.ListRolesForUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRolesForUser", varargs...)
	ret0, _ := ret[0].(*securitypb.ListRolesForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolesForUser indicates an expected call of ListRolesForUser.
func (mr *MockSecurityServiceClientMockRecorder) ListRolesForUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolesForUser", reflect.TypeOf((*MockSecurityServiceClient)(nil).ListRolesForUser), varargs...)
}

// ListRolesWithPermissionsForUser mocks base method.
func (m *MockSecurityServiceClient) ListRolesWithPermissionsForUser(ctx context.Context, in *securitypb.ListRolesWithPermissionsForUserRequest, opts ...grpc.CallOption) (*securitypb.ListRolesWithPermissionsForUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRolesWithPermissionsForUser", varargs...)
	ret0, _ := ret[0].(*securitypb.ListRolesWithPermissionsForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolesWithPermissionsForUser indicates an expected call of ListRolesWithPermissionsForUser.
func (mr *MockSecurityServiceClientMockRecorder) ListRolesWithPermissionsForUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolesWithPermissionsForUser", reflect.TypeOf((*MockSecurityServiceClient)(nil).ListRolesWithPermissionsForUser), varargs...)
}

// ListUsersForRole mocks base method.
func (m *MockSecurityServiceClient) ListUsersForRole(ctx context.Context, in *securitypb.ListUsersForRoleRequest, opts ...grpc.CallOption) (*securitypb.ListUsersForRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersForRole", varargs...)
	ret0, _ := ret[0].(*securitypb.ListUsersForRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersForRole indicates an expected call of ListUsersForRole.
func (mr *MockSecurityServiceClientMockRecorder) ListUsersForRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersForRole", reflect.TypeOf((*MockSecurityServiceClient)(nil).ListUsersForRole), varargs...)
}

// ListUsersFull mocks base method.
func (m *MockSecurityServiceClient) ListUsersFull(ctx context.Context, in *securitypb.ListUsersFullRequest, opts ...grpc.CallOption) (*securitypb.ListUsersFullResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersFull", varargs...)
	ret0, _ := ret[0].(*securitypb.ListUsersFullResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersFull indicates an expected call of ListUsersFull.
func (mr *MockSecurityServiceClientMockRecorder) ListUsersFull(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersFull", reflect.TypeOf((*MockSecurityServiceClient)(nil).ListUsersFull), varargs...)
}

// RemoveUsersFromRole mocks base method.
func (m *MockSecurityServiceClient) RemoveUsersFromRole(ctx context.Context, in *securitypb.RemoveUsersFromRoleRequest, opts ...grpc.CallOption) (*securitypb.RemoveUsersFromRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUsersFromRole", varargs...)
	ret0, _ := ret[0].(*securitypb.RemoveUsersFromRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUsersFromRole indicates an expected call of RemoveUsersFromRole.
func (mr *MockSecurityServiceClientMockRecorder) RemoveUsersFromRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUsersFromRole", reflect.TypeOf((*MockSecurityServiceClient)(nil).RemoveUsersFromRole), varargs...)
}

// SetRolePermissions mocks base method.
func (m *MockSecurityServiceClient) SetRolePermissions(ctx context.Context, in *securitypb.SetRolePermissionsRequest, opts ...grpc.CallOption) (*securitypb.SetRolePermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRolePermissions", varargs...)
	ret0, _ := ret[0].(*securitypb.SetRolePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRolePermissions indicates an expected call of SetRolePermissions.
func (mr *MockSecurityServiceClientMockRecorder) SetRolePermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRolePermissions", reflect.TypeOf((*MockSecurityServiceClient)(nil).SetRolePermissions), varargs...)
}

// SetRolesForUser mocks base method.
func (m *MockSecurityServiceClient) SetRolesForUser(ctx context.Context, in *securitypb.SetRolesForUserRequest, opts ...grpc.CallOption) (*securitypb.SetRolesForUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRolesForUser", varargs...)
	ret0, _ := ret[0].(*securitypb.SetRolesForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRolesForUser indicates an expected call of SetRolesForUser.
func (mr *MockSecurityServiceClientMockRecorder) SetRolesForUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRolesForUser", reflect.TypeOf((*MockSecurityServiceClient)(nil).SetRolesForUser), varargs...)
}

// UpdatePermission mocks base method.
func (m *MockSecurityServiceClient) UpdatePermission(ctx context.Context, in *securitypb.UpdatePermissionRequest, opts ...grpc.CallOption) (*securitypb.UpdatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePermission", varargs...)
	ret0, _ := ret[0].(*securitypb.UpdatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockSecurityServiceClientMockRecorder) UpdatePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockSecurityServiceClient)(nil).UpdatePermission), varargs...)
}

// UpdateRole mocks base method.
func (m *MockSecurityServiceClient) UpdateRole(ctx context.Context, in *securitypb.UpdateRoleRequest, opts ...grpc.CallOption) (*securitypb.UpdateRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRole", varargs...)
	ret0, _ := ret[0].(*securitypb.UpdateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockSecurityServiceClientMockRecorder) UpdateRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockSecurityServiceClient)(nil).UpdateRole), varargs...)
}

// MockSecurityServiceServer is a mock of SecurityServiceServer interface.
type MockSecurityServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityServiceServerMockRecorder
	isgomock struct{}
}

// MockSecurityServiceServerMockRecorder is the mock recorder for MockSecurityServiceServer.
type MockSecurityServiceServerMockRecorder struct {
	mock *MockSecurityServiceServer
}

// NewMockSecurityServiceServer creates a new mock instance.
func NewMockSecurityServiceServer(ctrl *gomock.Controller) *MockSecurityServiceServer {
	mock := &MockSecurityServiceServer{ctrl: ctrl}
	mock.recorder = &MockSecurityServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityServiceServer) EXPECT() *MockSecurityServiceServerMockRecorder {
	return m.recorder
}

// AddUsersToRole mocks base method.
func (m *MockSecurityServiceServer) AddUsersToRole(arg0 context.Context, arg1 *securitypb.AddUsersToRoleRequest) (*securitypb.AddUsersToRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUsersToRole", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.AddUsersToRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUsersToRole indicates an expected call of AddUsersToRole.
func (mr *MockSecurityServiceServerMockRecorder) AddUsersToRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersToRole", reflect.TypeOf((*MockSecurityServiceServer)(nil).AddUsersToRole), arg0, arg1)
}

// CreatePermission mocks base method.
func (m *MockSecurityServiceServer) CreatePermission(arg0 context.Context, arg1 *securitypb.CreatePermissionRequest) (*securitypb.CreatePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.CreatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockSecurityServiceServerMockRecorder) CreatePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockSecurityServiceServer)(nil).CreatePermission), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockSecurityServiceServer) CreateRole(arg0 context.Context, arg1 *securitypb.CreateRoleRequest) (*securitypb.CreateRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.CreateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockSecurityServiceServerMockRecorder) CreateRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockSecurityServiceServer)(nil).CreateRole), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockSecurityServiceServer) DeletePermission(arg0 context.Context, arg1 *securitypb.DeletePermissionRequest) (*securitypb.DeletePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.DeletePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockSecurityServiceServerMockRecorder) DeletePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockSecurityServiceServer)(nil).DeletePermission), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockSecurityServiceServer) DeleteRole(arg0 context.Context, arg1 *securitypb.DeleteRoleRequest) (*securitypb.DeleteRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.DeleteRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockSecurityServiceServerMockRecorder) DeleteRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockSecurityServiceServer)(nil).DeleteRole), arg0, arg1)
}

// GetPermission mocks base method.
func (m *MockSecurityServiceServer) GetPermission(arg0 context.Context, arg1 *securitypb.GetPermissionRequest) (*securitypb.GetPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.GetPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockSecurityServiceServerMockRecorder) GetPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockSecurityServiceServer)(nil).GetPermission), arg0, arg1)
}

// GetRole mocks base method.
func (m *MockSecurityServiceServer) GetRole(arg0 context.Context, arg1 *securitypb.GetRoleRequest) (*securitypb.GetRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.GetRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockSecurityServiceServerMockRecorder) GetRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockSecurityServiceServer)(nil).GetRole), arg0, arg1)
}

// ListPermissions mocks base method.
func (m *MockSecurityServiceServer) ListPermissions(arg0 context.Context, arg1 *securitypb.ListPermissionsRequest) (*securitypb.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockSecurityServiceServerMockRecorder) ListPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockSecurityServiceServer)(nil).ListPermissions), arg0, arg1)
}

// ListRolePermissions mocks base method.
func (m *MockSecurityServiceServer) ListRolePermissions(arg0 context.Context, arg1 *securitypb.ListRolePermissionsRequest) (*securitypb.ListRolePermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolePermissions", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.ListRolePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolePermissions indicates an expected call of ListRolePermissions.
func (mr *MockSecurityServiceServerMockRecorder) ListRolePermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolePermissions", reflect.TypeOf((*MockSecurityServiceServer)(nil).ListRolePermissions), arg0, arg1)
}

// ListRoles mocks base method.
func (m *MockSecurityServiceServer) ListRoles(arg0 context.Context, arg1 *securitypb.ListRolesRequest) (*securitypb.ListRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.ListRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockSecurityServiceServerMockRecorder) ListRoles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockSecurityServiceServer)(nil).ListRoles), arg0, arg1)
}

// ListRolesForUser mocks base method.
func (m *MockSecurityServiceServer) ListRolesForUser(arg0 context.Context, arg1 *securitypb.ListRolesForUserRequest) (*securitypb.ListRolesForUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolesForUser", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.ListRolesForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolesForUser indicates an expected call of ListRolesForUser.
func (mr *MockSecurityServiceServerMockRecorder) ListRolesForUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolesForUser", reflect.TypeOf((*MockSecurityServiceServer)(nil).ListRolesForUser), arg0, arg1)
}

// ListRolesWithPermissionsForUser mocks base method.
func (m *MockSecurityServiceServer) ListRolesWithPermissionsForUser(arg0 context.Context, arg1 *securitypb.ListRolesWithPermissionsForUserRequest) (*securitypb.ListRolesWithPermissionsForUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolesWithPermissionsForUser", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.ListRolesWithPermissionsForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolesWithPermissionsForUser indicates an expected call of ListRolesWithPermissionsForUser.
func (mr *MockSecurityServiceServerMockRecorder) ListRolesWithPermissionsForUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolesWithPermissionsForUser", reflect.TypeOf((*MockSecurityServiceServer)(nil).ListRolesWithPermissionsForUser), arg0, arg1)
}

// ListUsersForRole mocks base method.
func (m *MockSecurityServiceServer) ListUsersForRole(arg0 context.Context, arg1 *securitypb.ListUsersForRoleRequest) (*securitypb.ListUsersForRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersForRole", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.ListUsersForRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersForRole indicates an expected call of ListUsersForRole.
func (mr *MockSecurityServiceServerMockRecorder) ListUsersForRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersForRole", reflect.TypeOf((*MockSecurityServiceServer)(nil).ListUsersForRole), arg0, arg1)
}

// ListUsersFull mocks base method.
func (m *MockSecurityServiceServer) ListUsersFull(arg0 context.Context, arg1 *securitypb.ListUsersFullRequest) (*securitypb.ListUsersFullResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersFull", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.ListUsersFullResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersFull indicates an expected call of ListUsersFull.
func (mr *MockSecurityServiceServerMockRecorder) ListUsersFull(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersFull", reflect.TypeOf((*MockSecurityServiceServer)(nil).ListUsersFull), arg0, arg1)
}

// RemoveUsersFromRole mocks base method.
func (m *MockSecurityServiceServer) RemoveUsersFromRole(arg0 context.Context, arg1 *securitypb.RemoveUsersFromRoleRequest) (*securitypb.RemoveUsersFromRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUsersFromRole", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.RemoveUsersFromRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUsersFromRole indicates an expected call of RemoveUsersFromRole.
func (mr *MockSecurityServiceServerMockRecorder) RemoveUsersFromRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUsersFromRole", reflect.TypeOf((*MockSecurityServiceServer)(nil).RemoveUsersFromRole), arg0, arg1)
}

// SetRolePermissions mocks base method.
func (m *MockSecurityServiceServer) SetRolePermissions(arg0 context.Context, arg1 *securitypb.SetRolePermissionsRequest) (*securitypb.SetRolePermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRolePermissions", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.SetRolePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRolePermissions indicates an expected call of SetRolePermissions.
func (mr *MockSecurityServiceServerMockRecorder) SetRolePermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRolePermissions", reflect.TypeOf((*MockSecurityServiceServer)(nil).SetRolePermissions), arg0, arg1)
}

// SetRolesForUser mocks base method.
func (m *MockSecurityServiceServer) SetRolesForUser(arg0 context.Context, arg1 *securitypb.SetRolesForUserRequest) (*securitypb.SetRolesForUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRolesForUser", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.SetRolesForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRolesForUser indicates an expected call of SetRolesForUser.
func (mr *MockSecurityServiceServerMockRecorder) SetRolesForUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRolesForUser", reflect.TypeOf((*MockSecurityServiceServer)(nil).SetRolesForUser), arg0, arg1)
}

// UpdatePermission mocks base method.
func (m *MockSecurityServiceServer) UpdatePermission(arg0 context.Context, arg1 *securitypb.UpdatePermissionRequest) (*securitypb.UpdatePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.UpdatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockSecurityServiceServerMockRecorder) UpdatePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockSecurityServiceServer)(nil).UpdatePermission), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockSecurityServiceServer) UpdateRole(arg0 context.Context, arg1 *securitypb.UpdateRoleRequest) (*securitypb.UpdateRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(*securitypb.UpdateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockSecurityServiceServerMockRecorder) UpdateRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockSecurityServiceServer)(nil).UpdateRole), arg0, arg1)
}

// mustEmbedUnimplementedSecurityServiceServer mocks base method.
func (m *MockSecurityServiceServer) mustEmbedUnimplementedSecurityServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecurityServiceServer")
}

// mustEmbedUnimplementedSecurityServiceServer indicates an expected call of mustEmbedUnimplementedSecurityServiceServer.
func (mr *MockSecurityServiceServerMockRecorder) mustEmbedUnimplementedSecurityServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecurityServiceServer", reflect.TypeOf((*MockSecurityServiceServer)(nil).mustEmbedUnimplementedSecurityServiceServer))
}

// MockUnsafeSecurityServiceServer is a mock of UnsafeSecurityServiceServer interface.
type MockUnsafeSecurityServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSecurityServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeSecurityServiceServerMockRecorder is the mock recorder for MockUnsafeSecurityServiceServer.
type MockUnsafeSecurityServiceServerMockRecorder struct {
	mock *MockUnsafeSecurityServiceServer
}

// NewMockUnsafeSecurityServiceServer creates a new mock instance.
func NewMockUnsafeSecurityServiceServer(ctrl *gomock.Controller) *MockUnsafeSecurityServiceServer {
	mock := &MockUnsafeSecurityServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSecurityServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSecurityServiceServer) EXPECT() *MockUnsafeSecurityServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSecurityServiceServer mocks base method.
func (m *MockUnsafeSecurityServiceServer) mustEmbedUnimplementedSecurityServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecurityServiceServer")
}

// mustEmbedUnimplementedSecurityServiceServer indicates an expected call of mustEmbedUnimplementedSecurityServiceServer.
func (mr *MockUnsafeSecurityServiceServerMockRecorder) mustEmbedUnimplementedSecurityServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecurityServiceServer", reflect.TypeOf((*MockUnsafeSecurityServiceServer)(nil).mustEmbedUnimplementedSecurityServiceServer))
}
