// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../protogen/security_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=../../../../protogen/security_grpc.pb.go -destination=../../../../test/mocks/security_client.go -package=mocks -mock_names=SecurityServiceClient=SecurityServiceClient SecurityServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	protogen "github.com/Zapharaos/fihub-backend/protogen"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// SecurityServiceClient is a mock of SecurityServiceClient interface.
type SecurityServiceClient struct {
	ctrl     *gomock.Controller
	recorder *SecurityServiceClientMockRecorder
	isgomock struct{}
}

// SecurityServiceClientMockRecorder is the mock recorder for SecurityServiceClient.
type SecurityServiceClientMockRecorder struct {
	mock *SecurityServiceClient
}

// NewSecurityServiceClient creates a new mock instance.
func NewSecurityServiceClient(ctrl *gomock.Controller) *SecurityServiceClient {
	mock := &SecurityServiceClient{ctrl: ctrl}
	mock.recorder = &SecurityServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SecurityServiceClient) EXPECT() *SecurityServiceClientMockRecorder {
	return m.recorder
}

// CreatePermission mocks base method.
func (m *SecurityServiceClient) CreatePermission(ctx context.Context, in *protogen.CreatePermissionRequest, opts ...grpc.CallOption) (*protogen.CreatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePermission", varargs...)
	ret0, _ := ret[0].(*protogen.CreatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *SecurityServiceClientMockRecorder) CreatePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*SecurityServiceClient)(nil).CreatePermission), varargs...)
}

// DeletePermission mocks base method.
func (m *SecurityServiceClient) DeletePermission(ctx context.Context, in *protogen.DeletePermissionRequest, opts ...grpc.CallOption) (*protogen.DeletePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermission", varargs...)
	ret0, _ := ret[0].(*protogen.DeletePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *SecurityServiceClientMockRecorder) DeletePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*SecurityServiceClient)(nil).DeletePermission), varargs...)
}

// GetPermission mocks base method.
func (m *SecurityServiceClient) GetPermission(ctx context.Context, in *protogen.GetPermissionRequest, opts ...grpc.CallOption) (*protogen.GetPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermission", varargs...)
	ret0, _ := ret[0].(*protogen.GetPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *SecurityServiceClientMockRecorder) GetPermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*SecurityServiceClient)(nil).GetPermission), varargs...)
}

// ListPermissions mocks base method.
func (m *SecurityServiceClient) ListPermissions(ctx context.Context, in *protogen.ListPermissionsRequest, opts ...grpc.CallOption) (*protogen.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissions", varargs...)
	ret0, _ := ret[0].(*protogen.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *SecurityServiceClientMockRecorder) ListPermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*SecurityServiceClient)(nil).ListPermissions), varargs...)
}

// UpdatePermission mocks base method.
func (m *SecurityServiceClient) UpdatePermission(ctx context.Context, in *protogen.UpdatePermissionRequest, opts ...grpc.CallOption) (*protogen.UpdatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePermission", varargs...)
	ret0, _ := ret[0].(*protogen.UpdatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *SecurityServiceClientMockRecorder) UpdatePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*SecurityServiceClient)(nil).UpdatePermission), varargs...)
}

// MockSecurityServiceServer is a mock of SecurityServiceServer interface.
type MockSecurityServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityServiceServerMockRecorder
	isgomock struct{}
}

// MockSecurityServiceServerMockRecorder is the mock recorder for MockSecurityServiceServer.
type MockSecurityServiceServerMockRecorder struct {
	mock *MockSecurityServiceServer
}

// NewMockSecurityServiceServer creates a new mock instance.
func NewMockSecurityServiceServer(ctrl *gomock.Controller) *MockSecurityServiceServer {
	mock := &MockSecurityServiceServer{ctrl: ctrl}
	mock.recorder = &MockSecurityServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityServiceServer) EXPECT() *MockSecurityServiceServerMockRecorder {
	return m.recorder
}

// CreatePermission mocks base method.
func (m *MockSecurityServiceServer) CreatePermission(arg0 context.Context, arg1 *protogen.CreatePermissionRequest) (*protogen.CreatePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(*protogen.CreatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockSecurityServiceServerMockRecorder) CreatePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockSecurityServiceServer)(nil).CreatePermission), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockSecurityServiceServer) DeletePermission(arg0 context.Context, arg1 *protogen.DeletePermissionRequest) (*protogen.DeletePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(*protogen.DeletePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockSecurityServiceServerMockRecorder) DeletePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockSecurityServiceServer)(nil).DeletePermission), arg0, arg1)
}

// GetPermission mocks base method.
func (m *MockSecurityServiceServer) GetPermission(arg0 context.Context, arg1 *protogen.GetPermissionRequest) (*protogen.GetPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1)
	ret0, _ := ret[0].(*protogen.GetPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockSecurityServiceServerMockRecorder) GetPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockSecurityServiceServer)(nil).GetPermission), arg0, arg1)
}

// ListPermissions mocks base method.
func (m *MockSecurityServiceServer) ListPermissions(arg0 context.Context, arg1 *protogen.ListPermissionsRequest) (*protogen.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", arg0, arg1)
	ret0, _ := ret[0].(*protogen.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockSecurityServiceServerMockRecorder) ListPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockSecurityServiceServer)(nil).ListPermissions), arg0, arg1)
}

// UpdatePermission mocks base method.
func (m *MockSecurityServiceServer) UpdatePermission(arg0 context.Context, arg1 *protogen.UpdatePermissionRequest) (*protogen.UpdatePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(*protogen.UpdatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockSecurityServiceServerMockRecorder) UpdatePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockSecurityServiceServer)(nil).UpdatePermission), arg0, arg1)
}

// mustEmbedUnimplementedSecurityServiceServer mocks base method.
func (m *MockSecurityServiceServer) mustEmbedUnimplementedSecurityServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecurityServiceServer")
}

// mustEmbedUnimplementedSecurityServiceServer indicates an expected call of mustEmbedUnimplementedSecurityServiceServer.
func (mr *MockSecurityServiceServerMockRecorder) mustEmbedUnimplementedSecurityServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecurityServiceServer", reflect.TypeOf((*MockSecurityServiceServer)(nil).mustEmbedUnimplementedSecurityServiceServer))
}

// MockUnsafeSecurityServiceServer is a mock of UnsafeSecurityServiceServer interface.
type MockUnsafeSecurityServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSecurityServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeSecurityServiceServerMockRecorder is the mock recorder for MockUnsafeSecurityServiceServer.
type MockUnsafeSecurityServiceServerMockRecorder struct {
	mock *MockUnsafeSecurityServiceServer
}

// NewMockUnsafeSecurityServiceServer creates a new mock instance.
func NewMockUnsafeSecurityServiceServer(ctrl *gomock.Controller) *MockUnsafeSecurityServiceServer {
	mock := &MockUnsafeSecurityServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSecurityServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSecurityServiceServer) EXPECT() *MockUnsafeSecurityServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSecurityServiceServer mocks base method.
func (m *MockUnsafeSecurityServiceServer) mustEmbedUnimplementedSecurityServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecurityServiceServer")
}

// mustEmbedUnimplementedSecurityServiceServer indicates an expected call of mustEmbedUnimplementedSecurityServiceServer.
func (mr *MockUnsafeSecurityServiceServerMockRecorder) mustEmbedUnimplementedSecurityServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecurityServiceServer", reflect.TypeOf((*MockUnsafeSecurityServiceServer)(nil).mustEmbedUnimplementedSecurityServiceServer))
}
