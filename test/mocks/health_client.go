// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../gen/health_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=../../../../gen/health_grpc.pb.go -destination=../../../../test/mocks/health_client.go -package=mocks -mock_names=HealthServiceClient=HealthServiceClient HealthServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	protogen "github.com/Zapharaos/fihub-backend/gen"
	gomock "go.uber.org/mock/gomock"
	grpc "google.go.org/grpc"
)

// HealthServiceClient is a mock of HealthServiceClient interface.
type HealthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *HealthServiceClientMockRecorder
	isgomock struct{}
}

// HealthServiceClientMockRecorder is the mock recorder for HealthServiceClient.
type HealthServiceClientMockRecorder struct {
	mock *HealthServiceClient
}

// NewHealthServiceClient creates a new mock instance.
func NewHealthServiceClient(ctrl *gomock.Controller) *HealthServiceClient {
	mock := &HealthServiceClient{ctrl: ctrl}
	mock.recorder = &HealthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HealthServiceClient) EXPECT() *HealthServiceClientMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *HealthServiceClient) CheckHealth(ctx context.Context, in *protogen.HealthRequest, opts ...grpc.CallOption) (*protogen.HealthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckHealth", varargs...)
	ret0, _ := ret[0].(*protogen.HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *HealthServiceClientMockRecorder) CheckHealth(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*HealthServiceClient)(nil).CheckHealth), varargs...)
}

// MockHealthServiceServer is a mock of HealthServiceServer interface.
type MockHealthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockHealthServiceServerMockRecorder
	isgomock struct{}
}

// MockHealthServiceServerMockRecorder is the mock recorder for MockHealthServiceServer.
type MockHealthServiceServerMockRecorder struct {
	mock *MockHealthServiceServer
}

// NewMockHealthServiceServer creates a new mock instance.
func NewMockHealthServiceServer(ctrl *gomock.Controller) *MockHealthServiceServer {
	mock := &MockHealthServiceServer{ctrl: ctrl}
	mock.recorder = &MockHealthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthServiceServer) EXPECT() *MockHealthServiceServerMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockHealthServiceServer) CheckHealth(arg0 context.Context, arg1 *protogen.HealthRequest) (*protogen.HealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", arg0, arg1)
	ret0, _ := ret[0].(*protogen.HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockHealthServiceServerMockRecorder) CheckHealth(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockHealthServiceServer)(nil).CheckHealth), arg0, arg1)
}

// mustEmbedUnimplementedHealthServiceServer mocks base method.
func (m *MockHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthServiceServer")
}

// mustEmbedUnimplementedHealthServiceServer indicates an expected call of mustEmbedUnimplementedHealthServiceServer.
func (mr *MockHealthServiceServerMockRecorder) mustEmbedUnimplementedHealthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthServiceServer", reflect.TypeOf((*MockHealthServiceServer)(nil).mustEmbedUnimplementedHealthServiceServer))
}

// MockUnsafeHealthServiceServer is a mock of UnsafeHealthServiceServer interface.
type MockUnsafeHealthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHealthServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeHealthServiceServerMockRecorder is the mock recorder for MockUnsafeHealthServiceServer.
type MockUnsafeHealthServiceServerMockRecorder struct {
	mock *MockUnsafeHealthServiceServer
}

// NewMockUnsafeHealthServiceServer creates a new mock instance.
func NewMockUnsafeHealthServiceServer(ctrl *gomock.Controller) *MockUnsafeHealthServiceServer {
	mock := &MockUnsafeHealthServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHealthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHealthServiceServer) EXPECT() *MockUnsafeHealthServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHealthServiceServer mocks base method.
func (m *MockUnsafeHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthServiceServer")
}

// mustEmbedUnimplementedHealthServiceServer indicates an expected call of mustEmbedUnimplementedHealthServiceServer.
func (mr *MockUnsafeHealthServiceServerMockRecorder) mustEmbedUnimplementedHealthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthServiceServer", reflect.TypeOf((*MockUnsafeHealthServiceServer)(nil).mustEmbedUnimplementedHealthServiceServer))
}
