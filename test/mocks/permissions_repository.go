// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../../test/mocks/permissions_repository.go --package=mocks -mock_names=Repository=PermissionsRepository Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	permissions "github.com/Zapharaos/fihub-backend/internal/auth/permissions"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// PermissionsRepository is a mock of Repository interface.
type PermissionsRepository struct {
	ctrl     *gomock.Controller
	recorder *PermissionsRepositoryMockRecorder
	isgomock struct{}
}

// PermissionsRepositoryMockRecorder is the mock recorder for PermissionsRepository.
type PermissionsRepositoryMockRecorder struct {
	mock *PermissionsRepository
}

// NewPermissionsRepository creates a new mock instance.
func NewPermissionsRepository(ctrl *gomock.Controller) *PermissionsRepository {
	mock := &PermissionsRepository{ctrl: ctrl}
	mock.recorder = &PermissionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PermissionsRepository) EXPECT() *PermissionsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *PermissionsRepository) Create(permission permissions.Permission) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", permission)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *PermissionsRepositoryMockRecorder) Create(permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*PermissionsRepository)(nil).Create), permission)
}

// Delete mocks base method.
func (m *PermissionsRepository) Delete(uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *PermissionsRepositoryMockRecorder) Delete(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*PermissionsRepository)(nil).Delete), uuid)
}

// Get mocks base method.
func (m *PermissionsRepository) Get(uuid uuid.UUID) (permissions.Permission, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uuid)
	ret0, _ := ret[0].(permissions.Permission)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *PermissionsRepositoryMockRecorder) Get(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*PermissionsRepository)(nil).Get), uuid)
}

// GetAll mocks base method.
func (m *PermissionsRepository) GetAll() ([]permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *PermissionsRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*PermissionsRepository)(nil).GetAll))
}

// GetAllByRoleId mocks base method.
func (m *PermissionsRepository) GetAllByRoleId(roleUUID uuid.UUID) ([]permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByRoleId", roleUUID)
	ret0, _ := ret[0].([]permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByRoleId indicates an expected call of GetAllByRoleId.
func (mr *PermissionsRepositoryMockRecorder) GetAllByRoleId(roleUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByRoleId", reflect.TypeOf((*PermissionsRepository)(nil).GetAllByRoleId), roleUUID)
}

// GetAllByRoleIds mocks base method.
func (m *PermissionsRepository) GetAllByRoleIds(roleUUID []uuid.UUID) ([]permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByRoleIds", roleUUID)
	ret0, _ := ret[0].([]permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByRoleIds indicates an expected call of GetAllByRoleIds.
func (mr *PermissionsRepositoryMockRecorder) GetAllByRoleIds(roleUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByRoleIds", reflect.TypeOf((*PermissionsRepository)(nil).GetAllByRoleIds), roleUUID)
}

// GetAllForUser mocks base method.
func (m *PermissionsRepository) GetAllForUser(userUUID uuid.UUID) ([]permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUser", userUUID)
	ret0, _ := ret[0].([]permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUser indicates an expected call of GetAllForUser.
func (mr *PermissionsRepositoryMockRecorder) GetAllForUser(userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUser", reflect.TypeOf((*PermissionsRepository)(nil).GetAllForUser), userUUID)
}

// Update mocks base method.
func (m *PermissionsRepository) Update(permission permissions.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *PermissionsRepositoryMockRecorder) Update(permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*PermissionsRepository)(nil).Update), permission)
}
