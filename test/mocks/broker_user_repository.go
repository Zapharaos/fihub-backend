// Code generated by MockGen. DO NOT EDIT.
// Source: user_repository.go
//
// Generated by this command:
//
//	mockgen -source=user_repository.go -destination=../../test/mocks/broker_user_repository.go --package=mocks -mock_names=UserRepository=BrokerUserRepository UserRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Zapharaos/fihub-backend/internal/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// BrokerUserRepository is a mock of UserRepository interface.
type BrokerUserRepository struct {
	ctrl     *gomock.Controller
	recorder *BrokerUserRepositoryMockRecorder
	isgomock struct{}
}

// BrokerUserRepositoryMockRecorder is the mock recorder for BrokerUserRepository.
type BrokerUserRepositoryMockRecorder struct {
	mock *BrokerUserRepository
}

// NewBrokerUserRepository creates a new mock instance.
func NewBrokerUserRepository(ctrl *gomock.Controller) *BrokerUserRepository {
	mock := &BrokerUserRepository{ctrl: ctrl}
	mock.recorder = &BrokerUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *BrokerUserRepository) EXPECT() *BrokerUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *BrokerUserRepository) Create(userBroker models.BrokerUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userBroker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *BrokerUserRepositoryMockRecorder) Create(userBroker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*BrokerUserRepository)(nil).Create), userBroker)
}

// Delete mocks base method.
func (m *BrokerUserRepository) Delete(userBroker models.BrokerUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userBroker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *BrokerUserRepositoryMockRecorder) Delete(userBroker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*BrokerUserRepository)(nil).Delete), userBroker)
}

// Exists mocks base method.
func (m *BrokerUserRepository) Exists(userBroker models.BrokerUser) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", userBroker)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *BrokerUserRepositoryMockRecorder) Exists(userBroker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*BrokerUserRepository)(nil).Exists), userBroker)
}

// GetAll mocks base method.
func (m *BrokerUserRepository) GetAll(userID uuid.UUID) ([]models.BrokerUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID)
	ret0, _ := ret[0].([]models.BrokerUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *BrokerUserRepositoryMockRecorder) GetAll(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*BrokerUserRepository)(nil).GetAll), userID)
}
