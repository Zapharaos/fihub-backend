// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../../test/mocks/roles_repository.go --package=mocks -mock_names=Repository=RolesRepository Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	roles "github.com/Zapharaos/fihub-backend/internal/auth/roles"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// RolesRepository is a mock of Repository interface.
type RolesRepository struct {
	ctrl     *gomock.Controller
	recorder *RolesRepositoryMockRecorder
	isgomock struct{}
}

// RolesRepositoryMockRecorder is the mock recorder for RolesRepository.
type RolesRepositoryMockRecorder struct {
	mock *RolesRepository
}

// NewRolesRepository creates a new mock instance.
func NewRolesRepository(ctrl *gomock.Controller) *RolesRepository {
	mock := &RolesRepository{ctrl: ctrl}
	mock.recorder = &RolesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RolesRepository) EXPECT() *RolesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *RolesRepository) Create(role roles.Role, permissionUUIDs []uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", role, permissionUUIDs)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *RolesRepositoryMockRecorder) Create(role, permissionUUIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*RolesRepository)(nil).Create), role, permissionUUIDs)
}

// Delete mocks base method.
func (m *RolesRepository) Delete(uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *RolesRepositoryMockRecorder) Delete(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*RolesRepository)(nil).Delete), uuid)
}

// Get mocks base method.
func (m *RolesRepository) Get(uuid uuid.UUID) (roles.Role, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uuid)
	ret0, _ := ret[0].(roles.Role)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *RolesRepositoryMockRecorder) Get(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*RolesRepository)(nil).Get), uuid)
}

// GetAll mocks base method.
func (m *RolesRepository) GetAll() ([]roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *RolesRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*RolesRepository)(nil).GetAll))
}

// GetAllWithPermissions mocks base method.
func (m *RolesRepository) GetAllWithPermissions() (roles.RolesWithPermissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithPermissions")
	ret0, _ := ret[0].(roles.RolesWithPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithPermissions indicates an expected call of GetAllWithPermissions.
func (mr *RolesRepositoryMockRecorder) GetAllWithPermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithPermissions", reflect.TypeOf((*RolesRepository)(nil).GetAllWithPermissions))
}

// GetByName mocks base method.
func (m *RolesRepository) GetByName(name string) (roles.Role, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(roles.Role)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *RolesRepositoryMockRecorder) GetByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*RolesRepository)(nil).GetByName), name)
}

// GetRolesByUserId mocks base method.
func (m *RolesRepository) GetRolesByUserId(userUUID uuid.UUID) ([]roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesByUserId", userUUID)
	ret0, _ := ret[0].([]roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesByUserId indicates an expected call of GetRolesByUserId.
func (mr *RolesRepositoryMockRecorder) GetRolesByUserId(userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesByUserId", reflect.TypeOf((*RolesRepository)(nil).GetRolesByUserId), userUUID)
}

// GetWithPermissions mocks base method.
func (m *RolesRepository) GetWithPermissions(uuid uuid.UUID) (roles.RoleWithPermissions, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithPermissions", uuid)
	ret0, _ := ret[0].(roles.RoleWithPermissions)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithPermissions indicates an expected call of GetWithPermissions.
func (mr *RolesRepositoryMockRecorder) GetWithPermissions(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPermissions", reflect.TypeOf((*RolesRepository)(nil).GetWithPermissions), uuid)
}

// SetRolePermissions mocks base method.
func (m *RolesRepository) SetRolePermissions(roleUUID uuid.UUID, permissionUUIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRolePermissions", roleUUID, permissionUUIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRolePermissions indicates an expected call of SetRolePermissions.
func (mr *RolesRepositoryMockRecorder) SetRolePermissions(roleUUID, permissionUUIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRolePermissions", reflect.TypeOf((*RolesRepository)(nil).SetRolePermissions), roleUUID, permissionUUIDs)
}

// Update mocks base method.
func (m *RolesRepository) Update(role roles.Role, permissionUUIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", role, permissionUUIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *RolesRepositoryMockRecorder) Update(role, permissionUUIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*RolesRepository)(nil).Update), role, permissionUUIDs)
}
