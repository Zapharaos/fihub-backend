// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../test/mocks/transactions_repository.go --package=mocks -mock_names=Repository=TransactionsRepository Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	transactions "github.com/Zapharaos/fihub-backend/internal/transactions"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// TransactionsRepository is a mock of Repository interface.
type TransactionsRepository struct {
	ctrl     *gomock.Controller
	recorder *TransactionsRepositoryMockRecorder
	isgomock struct{}
}

// TransactionsRepositoryMockRecorder is the mock recorder for TransactionsRepository.
type TransactionsRepositoryMockRecorder struct {
	mock *TransactionsRepository
}

// NewTransactionsRepository creates a new mock instance.
func NewTransactionsRepository(ctrl *gomock.Controller) *TransactionsRepository {
	mock := &TransactionsRepository{ctrl: ctrl}
	mock.recorder = &TransactionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TransactionsRepository) EXPECT() *TransactionsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *TransactionsRepository) Create(transactionInput transactions.TransactionInput) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", transactionInput)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *TransactionsRepositoryMockRecorder) Create(transactionInput any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*TransactionsRepository)(nil).Create), transactionInput)
}

// Delete mocks base method.
func (m *TransactionsRepository) Delete(transaction transactions.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *TransactionsRepositoryMockRecorder) Delete(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*TransactionsRepository)(nil).Delete), transaction)
}

// Exists mocks base method.
func (m *TransactionsRepository) Exists(transactionID, userID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", transactionID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *TransactionsRepositoryMockRecorder) Exists(transactionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*TransactionsRepository)(nil).Exists), transactionID, userID)
}

// Get mocks base method.
func (m *TransactionsRepository) Get(transactionID uuid.UUID) (transactions.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", transactionID)
	ret0, _ := ret[0].(transactions.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *TransactionsRepositoryMockRecorder) Get(transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*TransactionsRepository)(nil).Get), transactionID)
}

// GetAll mocks base method.
func (m *TransactionsRepository) GetAll(userID uuid.UUID) ([]transactions.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID)
	ret0, _ := ret[0].([]transactions.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *TransactionsRepositoryMockRecorder) GetAll(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*TransactionsRepository)(nil).GetAll), userID)
}

// Update mocks base method.
func (m *TransactionsRepository) Update(transactionInput transactions.TransactionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", transactionInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *TransactionsRepositoryMockRecorder) Update(transactionInput any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*TransactionsRepository)(nil).Update), transactionInput)
}
