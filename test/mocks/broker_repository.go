// Code generated by MockGen. DO NOT EDIT.
// Source: broker_repository.go
//
// Generated by this command:
//
//	mockgen -source=broker_repository.go -destination=../../test/mocks/broker_repository.go --package=mocks -mock_names=BrokerRepository=BrokerRepository BrokerRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Zapharaos/fihub-backend/internal/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// BrokerRepository is a mock of BrokerRepository interface.
type BrokerRepository struct {
	ctrl     *gomock.Controller
	recorder *BrokerRepositoryMockRecorder
	isgomock struct{}
}

// BrokerRepositoryMockRecorder is the mock recorder for BrokerRepository.
type BrokerRepositoryMockRecorder struct {
	mock *BrokerRepository
}

// NewBrokerRepository creates a new mock instance.
func NewBrokerRepository(ctrl *gomock.Controller) *BrokerRepository {
	mock := &BrokerRepository{ctrl: ctrl}
	mock.recorder = &BrokerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *BrokerRepository) EXPECT() *BrokerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *BrokerRepository) Create(broker models.Broker) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", broker)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *BrokerRepositoryMockRecorder) Create(broker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*BrokerRepository)(nil).Create), broker)
}

// Delete mocks base method.
func (m *BrokerRepository) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *BrokerRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*BrokerRepository)(nil).Delete), id)
}

// DeleteImage mocks base method.
func (m *BrokerRepository) DeleteImage(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *BrokerRepositoryMockRecorder) DeleteImage(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*BrokerRepository)(nil).DeleteImage), id)
}

// Exists mocks base method.
func (m *BrokerRepository) Exists(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *BrokerRepositoryMockRecorder) Exists(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*BrokerRepository)(nil).Exists), id)
}

// ExistsByName mocks base method.
func (m *BrokerRepository) ExistsByName(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByName", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByName indicates an expected call of ExistsByName.
func (mr *BrokerRepositoryMockRecorder) ExistsByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByName", reflect.TypeOf((*BrokerRepository)(nil).ExistsByName), name)
}

// Get mocks base method.
func (m *BrokerRepository) Get(id uuid.UUID) (models.Broker, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(models.Broker)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *BrokerRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*BrokerRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *BrokerRepository) GetAll() ([]models.Broker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Broker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *BrokerRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*BrokerRepository)(nil).GetAll))
}

// GetAllEnabled mocks base method.
func (m *BrokerRepository) GetAllEnabled() ([]models.Broker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEnabled")
	ret0, _ := ret[0].([]models.Broker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEnabled indicates an expected call of GetAllEnabled.
func (mr *BrokerRepositoryMockRecorder) GetAllEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEnabled", reflect.TypeOf((*BrokerRepository)(nil).GetAllEnabled))
}

// HasImage mocks base method.
func (m *BrokerRepository) HasImage(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasImage", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasImage indicates an expected call of HasImage.
func (mr *BrokerRepositoryMockRecorder) HasImage(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasImage", reflect.TypeOf((*BrokerRepository)(nil).HasImage), id)
}

// SetImage mocks base method.
func (m *BrokerRepository) SetImage(id, imageId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetImage", id, imageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetImage indicates an expected call of SetImage.
func (mr *BrokerRepositoryMockRecorder) SetImage(id, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImage", reflect.TypeOf((*BrokerRepository)(nil).SetImage), id, imageId)
}

// Update mocks base method.
func (m *BrokerRepository) Update(broker models.Broker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", broker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *BrokerRepositoryMockRecorder) Update(broker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*BrokerRepository)(nil).Update), broker)
}
