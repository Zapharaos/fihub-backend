// Code generated by MockGen. DO NOT EDIT.
// Source: facade_public.go
//
// Generated by this command:
//
//	mockgen -source=facade_public.go -destination=../../test/mocks/security_facade_public.go --package=mocks -mock_names=Repository=PasswordRepository Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	securitypb "github.com/Zapharaos/fihub-backend/gen/go/securitypb"
	gomock "go.uber.org/mock/gomock"
)

// MockPermissionChecker is a mock of PermissionChecker interface.
type MockPermissionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionCheckerMockRecorder
	isgomock struct{}
}

// MockPermissionCheckerMockRecorder is the mock recorder for MockPermissionChecker.
type MockPermissionCheckerMockRecorder struct {
	mock *MockPermissionChecker
}

// NewMockPermissionChecker creates a new mock instance.
func NewMockPermissionChecker(ctrl *gomock.Controller) *MockPermissionChecker {
	mock := &MockPermissionChecker{ctrl: ctrl}
	mock.recorder = &MockPermissionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionChecker) EXPECT() *MockPermissionCheckerMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockPermissionChecker) CheckPermission(ctx context.Context, req *securitypb.CheckPermissionRequest) (*securitypb.CheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", ctx, req)
	ret0, _ := ret[0].(*securitypb.CheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockPermissionCheckerMockRecorder) CheckPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockPermissionChecker)(nil).CheckPermission), ctx, req)
}
