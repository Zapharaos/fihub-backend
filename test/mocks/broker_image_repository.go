// Code generated by MockGen. DO NOT EDIT.
// Source: image_repository.go
//
// Generated by this command:
//
//	mockgen -source=image_repository.go -destination=../../test/mocks/broker_image_repository.go --package=mocks -mock_names=ImageRepository=BrokerImageRepository ImageRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	brokers "github.com/Zapharaos/fihub-backend/internal/brokers"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// BrokerImageRepository is a mock of ImageRepository interface.
type BrokerImageRepository struct {
	ctrl     *gomock.Controller
	recorder *BrokerImageRepositoryMockRecorder
	isgomock struct{}
}

// BrokerImageRepositoryMockRecorder is the mock recorder for BrokerImageRepository.
type BrokerImageRepositoryMockRecorder struct {
	mock *BrokerImageRepository
}

// NewBrokerImageRepository creates a new mock instance.
func NewBrokerImageRepository(ctrl *gomock.Controller) *BrokerImageRepository {
	mock := &BrokerImageRepository{ctrl: ctrl}
	mock.recorder = &BrokerImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *BrokerImageRepository) EXPECT() *BrokerImageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *BrokerImageRepository) Create(image brokers.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *BrokerImageRepositoryMockRecorder) Create(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*BrokerImageRepository)(nil).Create), image)
}

// Delete mocks base method.
func (m *BrokerImageRepository) Delete(brokerImageID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", brokerImageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *BrokerImageRepositoryMockRecorder) Delete(brokerImageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*BrokerImageRepository)(nil).Delete), brokerImageID)
}

// Exists mocks base method.
func (m *BrokerImageRepository) Exists(brokerID, brokerImageID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", brokerID, brokerImageID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *BrokerImageRepositoryMockRecorder) Exists(brokerID, brokerImageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*BrokerImageRepository)(nil).Exists), brokerID, brokerImageID)
}

// Get mocks base method.
func (m *BrokerImageRepository) Get(brokerImageID uuid.UUID) (brokers.Image, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", brokerImageID)
	ret0, _ := ret[0].(brokers.Image)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *BrokerImageRepositoryMockRecorder) Get(brokerImageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*BrokerImageRepository)(nil).Get), brokerImageID)
}

// Update mocks base method.
func (m *BrokerImageRepository) Update(image brokers.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *BrokerImageRepositoryMockRecorder) Update(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*BrokerImageRepository)(nil).Update), image)
}
